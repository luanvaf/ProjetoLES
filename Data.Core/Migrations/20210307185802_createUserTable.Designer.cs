// <auto-generated />
using System;
using Data.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.Core.Migrations
{
    [DbContext(typeof(CoreContext))]
    [Migration("20210307185802_createUserTable")]
    partial class createUserTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Crm")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("UserType").HasValue("User");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 3, 7, 15, 58, 1, 859, DateTimeKind.Local).AddTicks(2106),
                            Name = "Resident"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 3, 7, 15, 58, 1, 860, DateTimeKind.Local).AddTicks(462),
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 3, 7, 15, 58, 1, 860, DateTimeKind.Local).AddTicks(579),
                            Name = "Professor"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2021, 3, 7, 15, 58, 1, 860, DateTimeKind.Local).AddTicks(583),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Administrator", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Administrator");

                    b.HasData(
                        new
                        {
                            Id = new Guid("319e2862-5c31-477a-9eeb-d84db67b2fc5"),
                            CreatedAt = new DateTime(2021, 3, 7, 15, 58, 1, 860, DateTimeKind.Local).AddTicks(5031),
                            Crm = "999999",
                            Name = "administrador",
                            Password = "6CA13D52CA70C883E0F0BB101E425A89E8624DE51DB2D2392593AF6A84118090",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("Domain.Entities.Professor", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("Titulation")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("Domain.Entities.Resident", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<int>("ResidenceYear")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Resident");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
